"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3454],{6040:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>r,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>t,toc:()=>c});var a=n(4848),i=n(8453);const o={title:"Aliases",description:"Define aliases for commands, flags, and bins"},l=void 0,t={id:"aliases",title:"Aliases",description:"Define aliases for commands, flags, and bins",source:"@site/../docs/aliases.md",sourceDirName:".",slug:"/aliases",permalink:"/docs/oclif/docs/aliases",draft:!1,unlisted:!1,editUrl:"https://github.com/oclif/oclif.github.io/tree/docs/docs/../docs/aliases.md",tags:[],version:"current",lastUpdatedBy:"Mike Donnalley",lastUpdatedAt:1711731567e3,frontMatter:{title:"Aliases",description:"Define aliases for commands, flags, and bins"},sidebar:"docs",previous:{title:"Guides",permalink:"/docs/oclif/docs/guides"},next:{title:"Custom Base Class",permalink:"/docs/oclif/docs/base_class"}},r={},c=[{value:"Command Aliases",id:"command-aliases",level:2},{value:"Flag Aliases",id:"flag-aliases",level:2},{value:"Bin Aliases",id:"bin-aliases",level:2}];function d(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.h2,{id:"command-aliases",children:"Command Aliases"}),"\n",(0,a.jsxs)(s.p,{children:["Aliases let you define a string that maps to a command. This command can be run as ",(0,a.jsx)(s.code,{children:"mycli config"}),", ",(0,a.jsx)(s.code,{children:"mycli config:index"}),", or ",(0,a.jsx)(s.code,{children:"mycli config:list"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-js",children:"import {Command, Flags} from '@oclif/core'\r\n\r\nexport class ConfigIndex extends Command {\r\n  static aliases = ['config:index', 'config:list']\r\n}\n"})}),"\n",(0,a.jsxs)(s.p,{children:['By default, aliases find the "real" command and just work.  If you\'re providing command aliases for backward compatibility but prefer users to use the "real" command, set ',(0,a.jsx)(s.code,{children:"deprecateAliases"})," to ",(0,a.jsx)(s.code,{children:"true"})," to warn users about the correct name"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-js",children:"export class ConfigIndex extends Command {\r\n  static aliases = ['config:index', 'config:list']\r\n  static deprecateAliases = true\r\n}\n"})}),"\n",(0,a.jsx)(s.h2,{id:"flag-aliases",children:"Flag Aliases"}),"\n",(0,a.jsx)(s.p,{children:"Like command aliases, but on an individual flag.  You can alias the name and short character, and optionally emit warnings when aliased names are used."}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-js",children:"export class ConfigIndex extends Command {\r\n  static flags = {\r\n    'new-name': Flags.boolean({\r\n      char: 'c',\r\n      aliases: ['old-name', 'o'],\r\n      deprecateAliases: true\r\n    })\r\n  }\r\n}\r\n\n"})}),"\n",(0,a.jsx)(s.h2,{id:"bin-aliases",children:"Bin Aliases"}),"\n",(0,a.jsxs)(s.p,{children:['Creating a CLI that responds to different names or "aliases" is easy, simply add a ',(0,a.jsx)(s.code,{children:"binAliases"})," property to your CLI's ",(0,a.jsx)(s.code,{children:"oclif"})," property in ",(0,a.jsx)(s.code,{children:"package.json"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-json",children:'{\r\n  "name": "mycli",\r\n  "version": "0.0.0",\r\n  "description": "My CLI",\r\n  "main": "bin/run.js",\r\n  "bin": {\r\n    "mycli": "./bin/run.js",\r\n    "mycli-alias": "./bin/run.js"\r\n  },\r\n  "oclif": {\r\n    "binAliases": ["mycli", "mycli-alias"]\r\n  }\r\n}\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Adding this property allows your CLI to respond to either of those names, and is used during the bundling and building process when shipping your CLI. Note that the ",(0,a.jsx)(s.code,{children:"bin"})," section was also modified to include both aliases, which is how npm creates bin aliases. To create a unified experience, regardless of the installation method, a CLI author must change both to match. Bin aliases also play nicely with ",(0,a.jsx)(s.code,{children:"@oclif/plugin-autocomplete"}),", so typing an alias and using autocomplete is the same experience as using the original name."]})]})}function m(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>t});var a=n(6540);const i={},o=a.createContext(i);function l(e){const s=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function t(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),a.createElement(o.Provider,{value:s},e.children)}}}]);