"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8908],{3424:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>a});var s=o(4848),t=o(8453);const r={title:"JSON",description:"Native support for `--json` flag"},l=void 0,i={id:"json",title:"JSON",description:"Native support for `--json` flag",source:"@site/../docs/json.md",sourceDirName:".",slug:"/json",permalink:"/docs/oclif/docs/json",draft:!1,unlisted:!1,editUrl:"https://github.com/oclif/oclif.github.io/tree/docs/docs/../docs/json.md",tags:[],version:"current",lastUpdatedBy:"Mike Donnalley",lastUpdatedAt:1711731567e3,frontMatter:{title:"JSON",description:"Native support for `--json` flag"},sidebar:"docs",previous:{title:"Just-in-Time Plugin Installation",permalink:"/docs/oclif/docs/jit_plugins"},next:{title:"NSIS Installer Customization",permalink:"/docs/oclif/docs/nsis-installer_customization"}},c={},a=[];function d(e){const n={code:"code",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["If you want to use the ",(0,s.jsx)(n.code,{children:"--json"})," flag to return JSON output to the user, then you can set the ",(0,s.jsx)(n.code,{children:"enableJsonFlag"})," property on the ",(0,s.jsx)(n.code,{children:"Command"})," class."]}),"\n",(0,s.jsxs)(n.p,{children:["When this property is set and the user supplies the ",(0,s.jsx)(n.code,{children:"--json"})," flag, the command will suppress all logs and instead log the return value to the console in JSON format. ",(0,s.jsx)(n.strong,{children:"Note"})," log suppression will only work if you use the logging methods on the ",(0,s.jsx)(n.code,{children:"Command"})," class instance. In other words, ",(0,s.jsx)(n.code,{children:"this.log"})," will be automatically suppressed but ",(0,s.jsx)(n.code,{children:"console.log"})," will not be."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import {Command} from '@oclif/core'\r\nexport class HelloCommand extends Command {\r\n  public static enableJsonFlag = true\r\n  public async run(): Promise<{ message: string }> {\r\n    this.log('hello, world!')\r\n    return { message: 'hello, world!' }\r\n  }\r\n}\r\n\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ my-cli hello\r\nhello, world!\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'$ my-cli hello --json\r\n{\r\n  "message": "hello, world!"\r\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>i});var s=o(6540);const t={},r=s.createContext(t);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);