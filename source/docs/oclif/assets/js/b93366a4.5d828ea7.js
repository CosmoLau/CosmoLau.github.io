"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6769],{9207:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var a=r(4848),t=r(8453);const o={title:"Flag Inheritance",description:"How to share flags"},s=void 0,c={id:"flag_inheritance",title:"Flag Inheritance",description:"How to share flags",source:"@site/../docs/flag_inheritance.md",sourceDirName:".",slug:"/flag_inheritance",permalink:"/docs/oclif/docs/flag_inheritance",draft:!1,unlisted:!1,editUrl:"https://github.com/oclif/oclif.github.io/tree/docs/docs/../docs/flag_inheritance.md",tags:[],version:"current",lastUpdatedBy:"Mike Donnalley",lastUpdatedAt:1711731567e3,frontMatter:{title:"Flag Inheritance",description:"How to share flags"},sidebar:"docs",previous:{title:"ESM",permalink:"/docs/oclif/docs/esm"},next:{title:"Flexible Taxonomy",permalink:"/docs/oclif/docs/flexible_taxonomy"}},i={},l=[];function d(e){const n={code:"code",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["There are some instances where you might want to define a flag once for all of your commands. In this case you can add a base flag to an abstract base ",(0,a.jsx)(n.code,{children:"Command"})," class. For example,"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { Command, Flags } from '@oclif/core';\r\n\r\nexport abstract class BaseCommand extends Command {\r\n  static baseFlags = {\r\n    interactive: Flags.boolean({\r\n      char: 'i',\r\n      description: 'Run command in interactive mode',\r\n      // Show this flag under a separate GLOBAL section in help.\r\n      helpGroup: 'GLOBAL',\r\n    }),\r\n  };\r\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Any command that extends ",(0,a.jsx)(n.code,{children:"BaseCommand"})," will now have an ",(0,a.jsx)(n.code,{children:"--interactive"})," flag on it."]}),"\n",(0,a.jsxs)(n.p,{children:["If you are going to stack multiple layers of abstract ",(0,a.jsx)(n.code,{children:"Command"})," classes, then you must spread the ",(0,a.jsx)(n.code,{children:"baseFlags"})," to ensure that the flags are properly inherited. For example,"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { Command, Flags } from '@oclif/core';\r\n\r\nexport abstract class FirstBaseCommand extends Command {\r\n  static baseFlags = {\r\n    interactive: Flags.boolean({\r\n      char: 'i',\r\n      description: 'Run command in interactive mode',\r\n      // Show this flag under a separate GLOBAL section in help.\r\n      helpGroup: 'GLOBAL',\r\n    }),\r\n  };\r\n}\r\n\r\nexport abstract class SecondBaseCommand extends FirstBaseCommand {\r\n  static baseFlags = {\r\n    ...FirstBaseCommand.baseFlags,\r\n    'log-level': Flags.option({\r\n      default: 'info',\r\n      description: 'Specify log level',\r\n      helpGroup: 'GLOBAL',\r\n      options: ['debug', 'warn', 'error', 'info', 'trace'] as const,\r\n      summary: 'Specify level for logging.',\r\n      char: 'l',\r\n    })(),\r\n  };\r\n}\r\n\r\nexport abstract class ThirdBaseCommand extends SecondBaseCommand {\r\n  static baseFlags = {\r\n    ...SecondBaseCommand.baseFlags,\r\n    verbose: Flags.boolean({\r\n      description: 'Show verbose output.',\r\n      char: 'v'\r\n    })\r\n  };\r\n}\n"})})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>c});var a=r(6540);const t={},o=a.createContext(t);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);