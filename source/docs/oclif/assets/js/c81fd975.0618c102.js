"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[218],{4240:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>l,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var n=o(4848),s=o(8453);const r={title:"Testing",description:"How to test your CLI"},i=void 0,c={id:"testing",title:"Testing",description:"How to test your CLI",source:"@site/../docs/testing.md",sourceDirName:".",slug:"/testing",permalink:"/docs/oclif/docs/testing",draft:!1,unlisted:!1,editUrl:"https://github.com/oclif/oclif.github.io/tree/docs/docs/../docs/testing.md",tags:[],version:"current",lastUpdatedBy:"Mike Donnalley",lastUpdatedAt:1711731567e3,frontMatter:{title:"Testing",description:"How to test your CLI"},sidebar:"docs",previous:{title:"Single Command CLI",permalink:"/docs/oclif/docs/single_command_cli"},next:{title:"Themes",permalink:"/docs/oclif/docs/themes"}},a={},d=[{value:"stdout/stderr",id:"stdoutstderr",level:2},{value:"Code Coverage",id:"code-coverage",level:2}];function h(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["Testing in oclif can be done with any testing framework. You can run commands with ",(0,n.jsx)(t.code,{children:"MyCommand.run()"})," which returns a promise you can wait on."]}),"\n",(0,n.jsxs)(t.p,{children:["There are common tasks however when writing CLI tools. For this, we have a conventional set of tools that we suggest using to test your CLI. These are based on ",(0,n.jsx)(t.a,{href:"https://mochajs.org",children:"mocha"})," and ",(0,n.jsx)(t.a,{href:"https://github.com/jdxcode/fancy-test",children:"fancy-test"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["Mocha is the top JavaScript testing framework and a solid choice for any project. fancy-test is a tool we developed that builds on top of mocha to make it easy to repeat patterns and write concise mocha tests. There is also a library ",(0,n.jsx)(t.a,{href:"https://github.com/oclif/test",children:"@oclif/test"})," that extends fancy-test with helpers specific to testing oclif CLIs. These are things like running a command or hook or checking if an exit status code is set, for example."]}),"\n",(0,n.jsxs)(t.p,{children:["Any CLI built with oclif will come preloaded with these tools and an example test that should work out of the box with ",(0,n.jsx)(t.code,{children:"npm test"})," or ",(0,n.jsx)(t.code,{children:"yarn test"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["As an example, let's look at the ",(0,n.jsx)(t.code,{children:"heroku whoami"})," command which makes an API call to get the current logged in user. If the user is not logged in, it exits with status 100. (This is a simplified example, here is ",(0,n.jsx)(t.a,{href:"https://github.com/heroku/heroku-cli-plugin-auth",children:"the actual code"}),".)"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"src/commands/whoami.ts"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"import Command from '@heroku-cli/command'\r\n\r\nexport class Whoami extends Command {\r\n  async run() {\r\n    try {\r\n      let {body: account} = await this.heroku.get('/account')\r\n      this.log(account.email)\r\n    } catch (err) {\r\n      if (err.statusCode === 401) {\r\n        this.error('not logged in', {exit: 100})\r\n      }\r\n      throw err\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Another common tool we like to use in testing oclif CLIs is ",(0,n.jsx)(t.a,{href:"https://github.com/node-nock/nock",children:"nock"}),". Install the ",(0,n.jsx)(t.code,{children:"nock"})," package as a devDependency."]}),"\n",(0,n.jsx)(t.p,{children:"Here is the test code"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"test/commands/whoami.test.ts"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"import {expect, test} from '@oclif/test'\r\n\r\ndescribe('auth:whoami', () => {\r\n  test\r\n  .nock('https://api.heroku.com', api => api\r\n    .get('/account')\r\n    // user is logged in, return their name\r\n    .reply(200, {email: 'jeff@example.com'})\r\n  )\r\n  .stdout()\r\n  .command(['auth:whoami'])\r\n  .it('shows user email when logged in', ctx => {\r\n    expect(ctx.stdout).to.equal('jeff@example.com\\n')\r\n  })\r\n\r\n  test\r\n  .nock('https://api.heroku.com', api => api\r\n    .get('/account')\r\n    // HTTP 401 means the user is not logged in with valid credentials\r\n    .reply(401)\r\n  )\r\n  .command(['auth:whoami'])\r\n  // checks to ensure the command exits with status 100\r\n  .exit(100)\r\n  .it('exits with status 100 when not logged in')\r\n})\n"})}),"\n",(0,n.jsxs)(t.p,{children:["These tools are setup to not only mock out the stdout/stderr and HTTP calls, but they're setup to ensure they automatically reset after the test. A common issue we've had when building CLIs with simpler ",(0,n.jsx)(t.code,{children:"beforeEach/afterEach"})," filters is that if the ",(0,n.jsx)(t.code,{children:"afterEach"})," filters aren't setup correctly, a failing test can leave mocks around that make later tests fail. Using fancy-test, we avoid this problem and only have to declare our mocks once."]}),"\n",(0,n.jsxs)(t.p,{children:["For more on how to test with oclif, check out the docs for ",(0,n.jsx)(t.a,{href:"https://github.com/jdxcode/fancy-test",children:"fancy-test"})," and ",(0,n.jsx)(t.a,{href:"https://github.com/oclif/test",children:"@oclif/test"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"stdoutstderr",children:"stdout/stderr"}),"\n",(0,n.jsxs)(t.p,{children:["The stdout/stderr mocks use ",(0,n.jsx)(t.a,{href:"https://github.com/jdxcode/stdout-stderr",children:"stdout-stderr"})," under the hood. This library can be used standalone if you'd prefer to use jest or want a different testing setup but still have the ability to mock out stdout and stderr."]}),"\n",(0,n.jsxs)(t.p,{children:["If you want to see the output but leave it mocked, you can either pass in ",(0,n.jsx)(t.code,{children:"{print: true}"})," to the options, or set ",(0,n.jsx)(t.code,{children:"TEST_OUTPUT=1"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"code-coverage",children:"Code Coverage"}),"\n",(0,n.jsxs)(t.p,{children:["Code coverage is provided automatically for JavaScript and TypeScript projects via ",(0,n.jsx)(t.a,{href:"https://npm.im/nyc",children:"nyc"}),". Just run ",(0,n.jsx)(t.code,{children:"yarn test"})," and it will show the code coverage. The coverage can optionally be sent to ",(0,n.jsx)(t.a,{href:"https://codecov.io",children:"codecov"})," in the CI scripts as well."]})]})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>i,x:()=>c});var n=o(6540);const s={},r=n.createContext(s);function i(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);