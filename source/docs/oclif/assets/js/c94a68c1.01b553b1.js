"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9604],{2391:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var t=r(4848),s=r(8453);const a={title:"Command Arguments"},i=void 0,o={id:"args",title:"Command Arguments",description:"Arguments are positional arguments passed to the command. For example, if this command was run with mycli arg1 arg2 it would be declared like this:",source:"@site/../docs/args.md",sourceDirName:".",slug:"/args",permalink:"/docs/oclif/docs/args",draft:!1,unlisted:!1,editUrl:"https://github.com/oclif/oclif.github.io/tree/docs/docs/../docs/args.md",tags:[],version:"current",lastUpdatedBy:"Mike Donnalley",lastUpdatedAt:171087419e4,frontMatter:{title:"Command Arguments"},sidebar:"docs",previous:{title:"Commands",permalink:"/docs/oclif/docs/commands"},next:{title:"Command Flags",permalink:"/docs/oclif/docs/flags"}},c={},d=[];function l(e){const n={code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Arguments are positional arguments passed to the command. For example, if this command was run with ",(0,t.jsx)(n.code,{children:"mycli arg1 arg2"})," it would be declared like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import {Args, Command} from '@oclif/core'\r\n\r\nexport class MyCLI extends Command {\r\n  static args = {\r\n    firstArg: Args.string(),\r\n    secondArg: Args.string(),\r\n  }\r\n\r\n  async run() {\r\n    // can get args as an object\r\n    const {args} = await this.parse(MyCLI)\r\n    this.log(`running my command with args: ${args.firstArg}, ${args.secondArg}`)\r\n    // can also get the args as an array\r\n    const {argv} = await this.parse(MyCLI)\r\n    this.log(`running my command with args: ${argv[0]}, ${argv[1]}`)\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Here are the options arguments can have:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"static args = {\r\n  firstArg: Args.string(\r\n    {\r\n      name: 'file',                     // name of arg to show in help and reference with args[name]\r\n      required: false,                  // make the arg required with `required: true`\r\n      description: 'output file',       // help description\r\n      hidden: true,                     // hide this arg from help\r\n      parse: async input => 'output',   // instead of the user input, return a different value\r\n      default: 'world',                 // default value if no arg input. Can also be an async function.\r\n      defaultHelp: 'a dynamic value'    // dynamic default value to show in help output (e.g. current working directory). Can be an async function that returns a string or undefined\r\n      options: ['a', 'b'],              // only allow input to be from a discrete set\r\n      ignoreStdin: false,               // set to true to ignore any value provided by stdin\r\n      noCacheDefault: false             // if true, the value returned by defaultHelp will not be cached in the oclif.manifest.json.\r\n    }\r\n  ),\r\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Here are the types of args that ",(0,t.jsx)(n.code,{children:"Args"})," exports:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"string"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"integer"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"boolean"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"url"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"file"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"directory"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"custom"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For variable length arguments, disable argument validation with ",(0,t.jsx)(n.code,{children:"static strict = false"})," on the command."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import {Args, Command} from '@oclif/core'\r\n\r\nexport class MyCLI extends Command {\r\n  static args = {\r\n    things: Args.string(),\r\n  }\r\n\r\n  static strict = false\r\n\r\n  async run() {\r\n    // If you're using strict=false you should use argv to access the provided args.\r\n    const {argv} = await this.parse(MyCLI)\r\n    this.log(`running my command with args: ${argv[0]}, ${argv[1]}`)\r\n  }\r\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var t=r(6540);const s={},a=t.createContext(s);function i(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);