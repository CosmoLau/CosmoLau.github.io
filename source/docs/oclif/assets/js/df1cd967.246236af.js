"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2977],{5391:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>a,contentTitle:()=>n,default:()=>l,frontMatter:()=>c,metadata:()=>i,toc:()=>p});var s=t(4848),r=t(8453);const c={title:"Topic Separators"},n=void 0,i={id:"topic_separator",title:"Topic Separators",description:"By default, topics will be separated with colons, e.g. mycommand. However, you have the option to use spaces if you prefer, e.g. my awesome command.",source:"@site/../docs/topic_separator.md",sourceDirName:".",slug:"/topic_separator",permalink:"/docs/oclif/docs/topic_separator",draft:!1,unlisted:!1,editUrl:"https://github.com/oclif/oclif.github.io/tree/docs/docs/../docs/topic_separator.md",tags:[],version:"current",lastUpdatedBy:"Mike Donnalley",lastUpdatedAt:1635348187e3,frontMatter:{title:"Topic Separators"},sidebar:"docs",previous:{title:"Topics",permalink:"/docs/oclif/docs/topics"},next:{title:"Hooks",permalink:"/docs/oclif/docs/hooks"}},a={},p=[];function d(e){const o={code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(o.p,{children:["By default, topics will be separated with colons, e.g. ",(0,s.jsx)(o.code,{children:"my:awesome:command"}),". However, you have the option to use spaces if you prefer, e.g. ",(0,s.jsx)(o.code,{children:"my awesome command"}),"."]}),"\n",(0,s.jsxs)(o.p,{children:["To do this, simply set the ",(0,s.jsx)(o.code,{children:"topicSeparator"})," property in the oclif section of your package.json"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-json",children:'{\r\n  "oclif": {\r\n    "topicSeparator": " "\r\n  }\r\n}\n'})}),"\n",(0,s.jsxs)(o.p,{children:["Currently colons (",(0,s.jsx)(o.code,{children:'":"'}),") and spaces (",(0,s.jsx)(o.code,{children:'" "'}),") are the only supported topic separators."]})]})}function l(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,o,t)=>{t.d(o,{R:()=>n,x:()=>i});var s=t(6540);const r={},c=s.createContext(r);function n(e){const o=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:n(e.components),s.createElement(c.Provider,{value:o},e.children)}}}]);