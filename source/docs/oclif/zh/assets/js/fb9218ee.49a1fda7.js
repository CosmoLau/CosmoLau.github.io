"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2595],{4247:(n,r,e)=>{e.r(r),e.d(r,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var s=e(4848),t=e(8453);const a={title:"\u81ea\u5b9a\u4e49\u57fa\u7c7b",description:"\u521b\u5efa\u4e00\u4e2a\u53ef\u6269\u5c55\u7684 Command \u7c7b"},o=void 0,c={id:"base_class",title:"\u81ea\u5b9a\u4e49\u57fa\u7c7b",description:"\u521b\u5efa\u4e00\u4e2a\u53ef\u6269\u5c55\u7684 Command \u7c7b",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/base_class.md",sourceDirName:".",slug:"/base_class",permalink:"/docs/oclif/zh/docs/base_class",draft:!1,unlisted:!1,editUrl:"https://github.com/oclif/oclif.github.io/tree/docs/docs/../docs/base_class.md",tags:[],version:"current",lastUpdatedBy:"CosmoLau",lastUpdatedAt:1713160487e3,frontMatter:{title:"\u81ea\u5b9a\u4e49\u57fa\u7c7b",description:"\u521b\u5efa\u4e00\u4e2a\u53ef\u6269\u5c55\u7684 Command \u7c7b"},sidebar:"docs",previous:{title:"\u522b\u540d",permalink:"/docs/oclif/zh/docs/aliases"},next:{title:"\u914d\u7f6e\u4f60\u7684 CLI",permalink:"/docs/oclif/zh/docs/configuring_your_cli"}},i={},l=[];function d(n){const r={a:"a",code:"code",p:"p",pre:"pre",...(0,t.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.p,{children:"\u4f7f\u7528\u7ee7\u627f\u5728\u5e38\u7528\u547d\u4ee4\u4e4b\u95f4\u5171\u4eab\u529f\u80fd\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u547d\u4ee4\u57fa\u7c7b\u7684\u793a\u4f8b\uff0c\u5b83\u6709\u4e00\u4e9b\u5171\u540c\u7684\u5171\u4eab\u6807\u5fd7\u3002"}),"\n",(0,s.jsx)(r.p,{children:"\u5bf9\u4e8e\u5305\u542b\u591a\u4e2a\u63d2\u4ef6\u7684\u5927\u578b CLI\uff0c\u5c06\u8be5\u57fa\u7c7b\u653e\u5230\u81ea\u5df1\u7684 npm \u5305\u4e2d\u5171\u4eab\u662f\u975e\u5e38\u6709\u7528\u7684\u3002"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"// src/baseCommand.ts\r\nimport {Command, Flags, Interfaces} from '@oclif/core'\r\n\r\nexport type Flags<T extends typeof Command> = Interfaces.InferredFlags<typeof BaseCommand['baseFlags'] & T['flags']>\r\nexport type Args<T extends typeof Command> = Interfaces.InferredArgs<T['args']>\r\n\r\nexport abstract class BaseCommand<T extends typeof Command> extends Command {\r\n  // \u6dfb\u52a0 --json \u6807\u5fd7\r\n  static enableJsonFlag = true\r\n\r\n  // \u5b9a\u4e49\u53ef\u88ab\u4efb\u4f55\u6269\u5c55 BaseCommand \u7684\u547d\u4ee4\u7ee7\u627f\u7684\u6807\u8bb0\r\n  static baseFlags = {\r\n    'log-level': Flags.option({\r\n      default: 'info',\r\n      helpGroup: 'GLOBAL',\r\n      options: ['debug', 'warn', 'error', 'info', 'trace'] as const,\r\n      summary: 'Specify level for logging.',\r\n    })(),\r\n  }\r\n\r\n  protected flags!: Flags<T>\r\n  protected args!: Args<T>\r\n\r\n  public async init(): Promise<void> {\r\n    await super.init()\r\n    const {args, flags} = await this.parse({\r\n      flags: this.ctor.flags,\r\n      baseFlags: (super.ctor as typeof BaseCommand).baseFlags,\r\n      enableJsonFlag: this.ctor.enableJsonFlag,\r\n      args: this.ctor.args,\r\n      strict: this.ctor.strict,\r\n    })\r\n    this.flags = flags as Flags<T>\r\n    this.args = args as Args<T>\r\n  }\r\n\r\n  protected async catch(err: Error & {exitCode?: number}): Promise<any> {\r\n    // \u6dfb\u52a0\u4efb\u4f55\u81ea\u5b9a\u4e49\u903b\u8f91\u6765\u5904\u7406\u547d\u4ee4\u4e2d\u7684\u9519\u8bef\r\n    // \u6216\u8005\u53ea\u662f\u8fd4\u56de\u7236\u7c7b\u9519\u8bef\u5904\u7406\r\n    return super.catch(err)\r\n  }\r\n\r\n  protected async finally(_: Error | undefined): Promise<any> {\r\n    // \u5728\u8fd0\u884c\u548c\u6355\u83b7\u4e4b\u540e\u8c03\u7528\uff0c\u800c\u4e0d\u7ba1\u547d\u4ee4\u662f\u5426\u51fa\u9519\r\n    return super.finally(_)\r\n  }\r\n}\r\n\r\n// src/commands/my-command.ts\r\n\r\nexport default class MyCommand extends BaseCommand<typeof MyCommand> {\r\n  static summary = 'child class that extends BaseCommand'\r\n\r\n  static examples = [\r\n    '<%= config.bin %> <%= command.id %>',\r\n    '<%= config.bin %> <%= command.id %> --json',\r\n    '<%= config.bin %> <%= command.id %> --log-level debug',\r\n  ]\r\n\r\n  static flags = {\r\n    name: Flags.string({\r\n      char: 'n',\r\n      summary: 'Name to print.',\r\n      required: true,\r\n    }),\r\n  }\r\n\r\n  public async run(): Promise<Flags<typeof MyCommand>> {\r\n    for (const [flag, value] of Object.entries(this.flags)) {\r\n      this.log(`${flag}: ${value}`)\r\n    }\r\n\r\n    return this.flags\r\n  }\r\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["\u5bf9\u4e8e\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u793a\u4f8b\uff0c",(0,s.jsx)(r.a,{href:"https://github.com/salesforcecli/sf-plugins-core/blob/main/src/sfCommand.ts",children:"\u8fd9\u91cc"}),"\u662f\u6211\u4eec\u5982\u4f55\u4e3a Salesforce CLI \u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\u7684\u3002"]})]})}function m(n={}){const{wrapper:r}={...(0,t.R)(),...n.components};return r?(0,s.jsx)(r,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},8453:(n,r,e)=>{e.d(r,{R:()=>o,x:()=>c});var s=e(6540);const t={},a=s.createContext(t);function o(n){const r=s.useContext(a);return s.useMemo((function(){return"function"==typeof n?n(r):{...r,...n}}),[r,n])}function c(n){let r;return r=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),s.createElement(a.Provider,{value:r},n.children)}}}]);